/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneCreateZoneMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneCreateZoneMessage{}

// ZoneCreateZoneMessage struct for ZoneCreateZoneMessage
type ZoneCreateZoneMessage struct {
	// The zone's domain name
	Domain *string `json:"domain,omitempty"`
	// A key/value pair of user-defined labels for a DNS zone  Zone labels are not processed by StackPath and are solely used for users to organize their DNS zones.
	Labels *map[string]string `json:"labels,omitempty"`
	// Whether or not to create a zone for the apex domain only  If this is true and a domain with subdomains is provided, it will be stripped and only the root domain will be used for the zone. If this is false an error will be returned if it's not already an apex domain.
	UseApexDomain *bool `json:"useApexDomain,omitempty"`
}

// NewZoneCreateZoneMessage instantiates a new ZoneCreateZoneMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneCreateZoneMessage() *ZoneCreateZoneMessage {
	this := ZoneCreateZoneMessage{}
	return &this
}

// NewZoneCreateZoneMessageWithDefaults instantiates a new ZoneCreateZoneMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneCreateZoneMessageWithDefaults() *ZoneCreateZoneMessage {
	this := ZoneCreateZoneMessage{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ZoneCreateZoneMessage) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreateZoneMessage) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ZoneCreateZoneMessage) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ZoneCreateZoneMessage) SetDomain(v string) {
	o.Domain = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ZoneCreateZoneMessage) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreateZoneMessage) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ZoneCreateZoneMessage) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ZoneCreateZoneMessage) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetUseApexDomain returns the UseApexDomain field value if set, zero value otherwise.
func (o *ZoneCreateZoneMessage) GetUseApexDomain() bool {
	if o == nil || IsNil(o.UseApexDomain) {
		var ret bool
		return ret
	}
	return *o.UseApexDomain
}

// GetUseApexDomainOk returns a tuple with the UseApexDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreateZoneMessage) GetUseApexDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.UseApexDomain) {
		return nil, false
	}
	return o.UseApexDomain, true
}

// HasUseApexDomain returns a boolean if a field has been set.
func (o *ZoneCreateZoneMessage) HasUseApexDomain() bool {
	if o != nil && !IsNil(o.UseApexDomain) {
		return true
	}

	return false
}

// SetUseApexDomain gets a reference to the given bool and assigns it to the UseApexDomain field.
func (o *ZoneCreateZoneMessage) SetUseApexDomain(v bool) {
	o.UseApexDomain = &v
}

func (o ZoneCreateZoneMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneCreateZoneMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.UseApexDomain) {
		toSerialize["useApexDomain"] = o.UseApexDomain
	}
	return toSerialize, nil
}

type NullableZoneCreateZoneMessage struct {
	value *ZoneCreateZoneMessage
	isSet bool
}

func (v NullableZoneCreateZoneMessage) Get() *ZoneCreateZoneMessage {
	return v.value
}

func (v *NullableZoneCreateZoneMessage) Set(val *ZoneCreateZoneMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneCreateZoneMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneCreateZoneMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneCreateZoneMessage(val *ZoneCreateZoneMessage) *NullableZoneCreateZoneMessage {
	return &NullableZoneCreateZoneMessage{value: val, isSet: true}
}

func (v NullableZoneCreateZoneMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneCreateZoneMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


