/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ZoneZoneStatus the model 'ZoneZoneStatus'
type ZoneZoneStatus string

// List of zoneZoneStatus
const (
	ACTIVE ZoneZoneStatus = "ACTIVE"
	SUSPENDED ZoneZoneStatus = "SUSPENDED"
	BILLING_SUSPENDED ZoneZoneStatus = "BILLING_SUSPENDED"
	INACTIVE ZoneZoneStatus = "INACTIVE"
)

// All allowed values of ZoneZoneStatus enum
var AllowedZoneZoneStatusEnumValues = []ZoneZoneStatus{
	"ACTIVE",
	"SUSPENDED",
	"BILLING_SUSPENDED",
	"INACTIVE",
}

func (v *ZoneZoneStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZoneZoneStatus(value)
	for _, existing := range AllowedZoneZoneStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZoneZoneStatus", value)
}

// NewZoneZoneStatusFromValue returns a pointer to a valid ZoneZoneStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZoneZoneStatusFromValue(v string) (*ZoneZoneStatus, error) {
	ev := ZoneZoneStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZoneZoneStatus: valid values are %v", v, AllowedZoneZoneStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZoneZoneStatus) IsValid() bool {
	for _, existing := range AllowedZoneZoneStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to zoneZoneStatus value
func (v ZoneZoneStatus) Ptr() *ZoneZoneStatus {
	return &v
}

type NullableZoneZoneStatus struct {
	value *ZoneZoneStatus
	isSet bool
}

func (v NullableZoneZoneStatus) Get() *ZoneZoneStatus {
	return v.value
}

func (v *NullableZoneZoneStatus) Set(val *ZoneZoneStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneZoneStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneZoneStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneZoneStatus(val *ZoneZoneStatus) *NullableZoneZoneStatus {
	return &NullableZoneZoneStatus{value: val, isSet: true}
}

func (v NullableZoneZoneStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneZoneStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

