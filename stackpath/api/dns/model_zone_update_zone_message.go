/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the ZoneUpdateZoneMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneUpdateZoneMessage{}

// ZoneUpdateZoneMessage struct for ZoneUpdateZoneMessage
type ZoneUpdateZoneMessage struct {
	// A key/value pair of user-defined labels for a DNS zone  Zone labels are not processed by StackPath and are solely used for users to organize their DNS zones.
	Labels *map[string]string `json:"labels,omitempty"`
}

// NewZoneUpdateZoneMessage instantiates a new ZoneUpdateZoneMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneUpdateZoneMessage() *ZoneUpdateZoneMessage {
	this := ZoneUpdateZoneMessage{}
	return &this
}

// NewZoneUpdateZoneMessageWithDefaults instantiates a new ZoneUpdateZoneMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneUpdateZoneMessageWithDefaults() *ZoneUpdateZoneMessage {
	this := ZoneUpdateZoneMessage{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ZoneUpdateZoneMessage) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneUpdateZoneMessage) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ZoneUpdateZoneMessage) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ZoneUpdateZoneMessage) SetLabels(v map[string]string) {
	o.Labels = &v
}

func (o ZoneUpdateZoneMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneUpdateZoneMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableZoneUpdateZoneMessage struct {
	value *ZoneUpdateZoneMessage
	isSet bool
}

func (v NullableZoneUpdateZoneMessage) Get() *ZoneUpdateZoneMessage {
	return v.value
}

func (v *NullableZoneUpdateZoneMessage) Set(val *ZoneUpdateZoneMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneUpdateZoneMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneUpdateZoneMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneUpdateZoneMessage(val *ZoneUpdateZoneMessage) *NullableZoneUpdateZoneMessage {
	return &NullableZoneUpdateZoneMessage{value: val, isSet: true}
}

func (v NullableZoneUpdateZoneMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneUpdateZoneMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


