/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// ZoneRecordType The resource record types supported by StackPath  - EMPTY: The resource record has no type  - A: The resource record translates a host to an IPv4 address  - AAAA: The resource record translates a host to an IPv6 address  - CNAME: The resource record aliases one name to another  - TXT: The resource record contains a descriptive string. Many applications use TXT records for configuration  - MX: The resource record defines a mail exchanger for the given host  - SRV: The resource record defines a service on the domain  - NS: The resource record describes a nameserver that serves its domain's zone and records  - CAA: The resource record describes a certification authority authorization that adds validation to which certificate authorities can issue certificates for a domain
type ZoneRecordType string

// List of zoneRecordType
const (
	EMPTY ZoneRecordType = "EMPTY"
	A ZoneRecordType = "A"
	AAAA ZoneRecordType = "AAAA"
	CNAME ZoneRecordType = "CNAME"
	TXT ZoneRecordType = "TXT"
	MX ZoneRecordType = "MX"
	SRV ZoneRecordType = "SRV"
	NS ZoneRecordType = "NS"
	CAA ZoneRecordType = "CAA"
)

// All allowed values of ZoneRecordType enum
var AllowedZoneRecordTypeEnumValues = []ZoneRecordType{
	"EMPTY",
	"A",
	"AAAA",
	"CNAME",
	"TXT",
	"MX",
	"SRV",
	"NS",
	"CAA",
}

func (v *ZoneRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZoneRecordType(value)
	for _, existing := range AllowedZoneRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZoneRecordType", value)
}

// NewZoneRecordTypeFromValue returns a pointer to a valid ZoneRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZoneRecordTypeFromValue(v string) (*ZoneRecordType, error) {
	ev := ZoneRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZoneRecordType: valid values are %v", v, AllowedZoneRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZoneRecordType) IsValid() bool {
	for _, existing := range AllowedZoneRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to zoneRecordType value
func (v ZoneRecordType) Ptr() *ZoneRecordType {
	return &v
}

type NullableZoneRecordType struct {
	value *ZoneRecordType
	isSet bool
}

func (v NullableZoneRecordType) Get() *ZoneRecordType {
	return v.value
}

func (v *NullableZoneRecordType) Set(val *ZoneRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneRecordType(val *ZoneRecordType) *NullableZoneRecordType {
	return &NullableZoneRecordType{value: val, isSet: true}
}

func (v NullableZoneRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

