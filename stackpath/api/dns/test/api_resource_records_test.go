/*
DNS

Testing ResourceRecordsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dns

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_dns_ResourceRecordsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourceRecordsAPIService BulkCreateOrUpdateZoneRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.BulkCreateOrUpdateZoneRecords(context.Background(), stackId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService BulkDeleteZoneRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string

		httpRes, err := apiClient.ResourceRecordsAPI.BulkDeleteZoneRecords(context.Background(), stackId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService CreateZoneRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.CreateZoneRecord(context.Background(), stackId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService DeleteZoneRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string
		var zoneRecordId string

		httpRes, err := apiClient.ResourceRecordsAPI.DeleteZoneRecord(context.Background(), stackId, zoneId, zoneRecordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService GetZoneRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string
		var zoneRecordId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.GetZoneRecord(context.Background(), stackId, zoneId, zoneRecordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService GetZoneRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.GetZoneRecords(context.Background(), stackId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService ParseRecordsFromZoneFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.ParseRecordsFromZoneFile(context.Background(), stackId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService PatchZoneRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string
		var zoneRecordId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.PatchZoneRecord(context.Background(), stackId, zoneId, zoneRecordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceRecordsAPIService UpdateZoneRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stackId string
		var zoneId string
		var zoneRecordId string

		resp, httpRes, err := apiClient.ResourceRecordsAPI.UpdateZoneRecord(context.Background(), stackId, zoneId, zoneRecordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
