/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the DataVector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataVector{}

// DataVector A set of time series containing a single sample for each time series, all sharing the same timestamp
type DataVector struct {
	// A data point's value
	Results []DataVectorResult `json:"results,omitempty"`
}

// NewDataVector instantiates a new DataVector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataVector() *DataVector {
	this := DataVector{}
	return &this
}

// NewDataVectorWithDefaults instantiates a new DataVector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataVectorWithDefaults() *DataVector {
	this := DataVector{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *DataVector) GetResults() []DataVectorResult {
	if o == nil || IsNil(o.Results) {
		var ret []DataVectorResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataVector) GetResultsOk() ([]DataVectorResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *DataVector) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []DataVectorResult and assigns it to the Results field.
func (o *DataVector) SetResults(v []DataVectorResult) {
	o.Results = v
}

func (o DataVector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataVector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableDataVector struct {
	value *DataVector
	isSet bool
}

func (v NullableDataVector) Get() *DataVector {
	return v.value
}

func (v *NullableDataVector) Set(val *DataVector) {
	v.value = val
	v.isSet = true
}

func (v NullableDataVector) IsSet() bool {
	return v.isSet
}

func (v *NullableDataVector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataVector(val *DataVector) *NullableDataVector {
	return &NullableDataVector{value: val, isSet: true}
}

func (v NullableDataVector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataVector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


