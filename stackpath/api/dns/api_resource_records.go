/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ResourceRecordsAPIService ResourceRecordsAPI service
type ResourceRecordsAPIService service

type ApiBulkCreateOrUpdateZoneRecordsRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneBulkCreateOrUpdateZoneRecordsRequest *ZoneBulkCreateOrUpdateZoneRecordsRequest
}

func (r ApiBulkCreateOrUpdateZoneRecordsRequest) ZoneBulkCreateOrUpdateZoneRecordsRequest(zoneBulkCreateOrUpdateZoneRecordsRequest ZoneBulkCreateOrUpdateZoneRecordsRequest) ApiBulkCreateOrUpdateZoneRecordsRequest {
	r.zoneBulkCreateOrUpdateZoneRecordsRequest = &zoneBulkCreateOrUpdateZoneRecordsRequest
	return r
}

func (r ApiBulkCreateOrUpdateZoneRecordsRequest) Execute() (*ZoneBulkCreateOrUpdateZoneRecordsResponse, *http.Response, error) {
	return r.ApiService.BulkCreateOrUpdateZoneRecordsExecute(r)
}

/*
BulkCreateOrUpdateZoneRecords Create or update multiple records

Existing resource records are updated while new records are created

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @return ApiBulkCreateOrUpdateZoneRecordsRequest
*/
func (a *ResourceRecordsAPIService) BulkCreateOrUpdateZoneRecords(ctx context.Context, stackId string, zoneId string) ApiBulkCreateOrUpdateZoneRecordsRequest {
	return ApiBulkCreateOrUpdateZoneRecordsRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
	}
}

// Execute executes the request
//  @return ZoneBulkCreateOrUpdateZoneRecordsResponse
func (a *ResourceRecordsAPIService) BulkCreateOrUpdateZoneRecordsExecute(r ApiBulkCreateOrUpdateZoneRecordsRequest) (*ZoneBulkCreateOrUpdateZoneRecordsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneBulkCreateOrUpdateZoneRecordsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.BulkCreateOrUpdateZoneRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/bulk/records"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.zoneBulkCreateOrUpdateZoneRecordsRequest == nil {
		return localVarReturnValue, nil, reportError("zoneBulkCreateOrUpdateZoneRecordsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zoneBulkCreateOrUpdateZoneRecordsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkDeleteZoneRecordsRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneBulkDeleteZoneRecordsMessage *ZoneBulkDeleteZoneRecordsMessage
}

func (r ApiBulkDeleteZoneRecordsRequest) ZoneBulkDeleteZoneRecordsMessage(zoneBulkDeleteZoneRecordsMessage ZoneBulkDeleteZoneRecordsMessage) ApiBulkDeleteZoneRecordsRequest {
	r.zoneBulkDeleteZoneRecordsMessage = &zoneBulkDeleteZoneRecordsMessage
	return r
}

func (r ApiBulkDeleteZoneRecordsRequest) Execute() (*http.Response, error) {
	return r.ApiService.BulkDeleteZoneRecordsExecute(r)
}

/*
BulkDeleteZoneRecords Delete multiple records

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @return ApiBulkDeleteZoneRecordsRequest
*/
func (a *ResourceRecordsAPIService) BulkDeleteZoneRecords(ctx context.Context, stackId string, zoneId string) ApiBulkDeleteZoneRecordsRequest {
	return ApiBulkDeleteZoneRecordsRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
	}
}

// Execute executes the request
func (a *ResourceRecordsAPIService) BulkDeleteZoneRecordsExecute(r ApiBulkDeleteZoneRecordsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.BulkDeleteZoneRecords")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/bulk/records/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.zoneBulkDeleteZoneRecordsMessage == nil {
		return nil, reportError("zoneBulkDeleteZoneRecordsMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zoneBulkDeleteZoneRecordsMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateZoneRecordRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneUpdateZoneRecordMessage *ZoneUpdateZoneRecordMessage
}

func (r ApiCreateZoneRecordRequest) ZoneUpdateZoneRecordMessage(zoneUpdateZoneRecordMessage ZoneUpdateZoneRecordMessage) ApiCreateZoneRecordRequest {
	r.zoneUpdateZoneRecordMessage = &zoneUpdateZoneRecordMessage
	return r
}

func (r ApiCreateZoneRecordRequest) Execute() (*ZoneCreateZoneRecordResponse, *http.Response, error) {
	return r.ApiService.CreateZoneRecordExecute(r)
}

/*
CreateZoneRecord Create a record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @return ApiCreateZoneRecordRequest
*/
func (a *ResourceRecordsAPIService) CreateZoneRecord(ctx context.Context, stackId string, zoneId string) ApiCreateZoneRecordRequest {
	return ApiCreateZoneRecordRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
	}
}

// Execute executes the request
//  @return ZoneCreateZoneRecordResponse
func (a *ResourceRecordsAPIService) CreateZoneRecordExecute(r ApiCreateZoneRecordRequest) (*ZoneCreateZoneRecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneCreateZoneRecordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.CreateZoneRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.zoneUpdateZoneRecordMessage == nil {
		return localVarReturnValue, nil, reportError("zoneUpdateZoneRecordMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zoneUpdateZoneRecordMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteZoneRecordRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneRecordId string
}

func (r ApiDeleteZoneRecordRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteZoneRecordExecute(r)
}

/*
DeleteZoneRecord Delete a record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @param zoneRecordId A DNS resource record ID
 @return ApiDeleteZoneRecordRequest
*/
func (a *ResourceRecordsAPIService) DeleteZoneRecord(ctx context.Context, stackId string, zoneId string, zoneRecordId string) ApiDeleteZoneRecordRequest {
	return ApiDeleteZoneRecordRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
		zoneRecordId: zoneRecordId,
	}
}

// Execute executes the request
func (a *ResourceRecordsAPIService) DeleteZoneRecordExecute(r ApiDeleteZoneRecordRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.DeleteZoneRecord")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/records/{zone_record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_record_id"+"}", url.PathEscape(parameterValueToString(r.zoneRecordId, "zoneRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetZoneRecordRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneRecordId string
}

func (r ApiGetZoneRecordRequest) Execute() (*ZoneGetZoneRecordResponse, *http.Response, error) {
	return r.ApiService.GetZoneRecordExecute(r)
}

/*
GetZoneRecord Get a record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @param zoneRecordId A DNS resource record ID
 @return ApiGetZoneRecordRequest
*/
func (a *ResourceRecordsAPIService) GetZoneRecord(ctx context.Context, stackId string, zoneId string, zoneRecordId string) ApiGetZoneRecordRequest {
	return ApiGetZoneRecordRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
		zoneRecordId: zoneRecordId,
	}
}

// Execute executes the request
//  @return ZoneGetZoneRecordResponse
func (a *ResourceRecordsAPIService) GetZoneRecordExecute(r ApiGetZoneRecordRequest) (*ZoneGetZoneRecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneGetZoneRecordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.GetZoneRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/records/{zone_record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_record_id"+"}", url.PathEscape(parameterValueToString(r.zoneRecordId, "zoneRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetZoneRecordsRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	pageRequestFirst *string
	pageRequestAfter *string
	pageRequestFilter *string
	pageRequestSortBy *string
}

// The number of items desired.
func (r ApiGetZoneRecordsRequest) PageRequestFirst(pageRequestFirst string) ApiGetZoneRecordsRequest {
	r.pageRequestFirst = &pageRequestFirst
	return r
}

// The cursor value after which data will be returned.
func (r ApiGetZoneRecordsRequest) PageRequestAfter(pageRequestAfter string) ApiGetZoneRecordsRequest {
	r.pageRequestAfter = &pageRequestAfter
	return r
}

// SQL-style constraint filters.
func (r ApiGetZoneRecordsRequest) PageRequestFilter(pageRequestFilter string) ApiGetZoneRecordsRequest {
	r.pageRequestFilter = &pageRequestFilter
	return r
}

// Sort the response by the given field.
func (r ApiGetZoneRecordsRequest) PageRequestSortBy(pageRequestSortBy string) ApiGetZoneRecordsRequest {
	r.pageRequestSortBy = &pageRequestSortBy
	return r
}

func (r ApiGetZoneRecordsRequest) Execute() (*ZoneGetZoneRecordsResponse, *http.Response, error) {
	return r.ApiService.GetZoneRecordsExecute(r)
}

/*
GetZoneRecords Get all records

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @return ApiGetZoneRecordsRequest
*/
func (a *ResourceRecordsAPIService) GetZoneRecords(ctx context.Context, stackId string, zoneId string) ApiGetZoneRecordsRequest {
	return ApiGetZoneRecordsRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
	}
}

// Execute executes the request
//  @return ZoneGetZoneRecordsResponse
func (a *ResourceRecordsAPIService) GetZoneRecordsExecute(r ApiGetZoneRecordsRequest) (*ZoneGetZoneRecordsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneGetZoneRecordsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.GetZoneRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageRequestFirst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_request.first", r.pageRequestFirst, "")
	}
	if r.pageRequestAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_request.after", r.pageRequestAfter, "")
	}
	if r.pageRequestFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_request.filter", r.pageRequestFilter, "")
	}
	if r.pageRequestSortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_request.sort_by", r.pageRequestSortBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiParseRecordsFromZoneFileRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneParseRecordsFromZoneFileRequest *ZoneParseRecordsFromZoneFileRequest
}

func (r ApiParseRecordsFromZoneFileRequest) ZoneParseRecordsFromZoneFileRequest(zoneParseRecordsFromZoneFileRequest ZoneParseRecordsFromZoneFileRequest) ApiParseRecordsFromZoneFileRequest {
	r.zoneParseRecordsFromZoneFileRequest = &zoneParseRecordsFromZoneFileRequest
	return r
}

func (r ApiParseRecordsFromZoneFileRequest) Execute() (*ZoneParseRecordsFromZoneFileResponse, *http.Response, error) {
	return r.ApiService.ParseRecordsFromZoneFileExecute(r)
}

/*
ParseRecordsFromZoneFile Parse a zone file

Parse a BIND zone file into StackPath DNS resource records.

This returns a list of records, but does not import them into the zone. SOA and NS records in the zone file are ignored.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @return ApiParseRecordsFromZoneFileRequest
*/
func (a *ResourceRecordsAPIService) ParseRecordsFromZoneFile(ctx context.Context, stackId string, zoneId string) ApiParseRecordsFromZoneFileRequest {
	return ApiParseRecordsFromZoneFileRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
	}
}

// Execute executes the request
//  @return ZoneParseRecordsFromZoneFileResponse
func (a *ResourceRecordsAPIService) ParseRecordsFromZoneFileExecute(r ApiParseRecordsFromZoneFileRequest) (*ZoneParseRecordsFromZoneFileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneParseRecordsFromZoneFileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.ParseRecordsFromZoneFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/parse"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.zoneParseRecordsFromZoneFileRequest == nil {
		return localVarReturnValue, nil, reportError("zoneParseRecordsFromZoneFileRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zoneParseRecordsFromZoneFileRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchZoneRecordRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneRecordId string
	zonePatchZoneRecordMessage *ZonePatchZoneRecordMessage
}

func (r ApiPatchZoneRecordRequest) ZonePatchZoneRecordMessage(zonePatchZoneRecordMessage ZonePatchZoneRecordMessage) ApiPatchZoneRecordRequest {
	r.zonePatchZoneRecordMessage = &zonePatchZoneRecordMessage
	return r
}

func (r ApiPatchZoneRecordRequest) Execute() (*ZoneUpdateZoneRecordResponse, *http.Response, error) {
	return r.ApiService.PatchZoneRecordExecute(r)
}

/*
PatchZoneRecord Replace a record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @param zoneRecordId A DNS resource record ID
 @return ApiPatchZoneRecordRequest
*/
func (a *ResourceRecordsAPIService) PatchZoneRecord(ctx context.Context, stackId string, zoneId string, zoneRecordId string) ApiPatchZoneRecordRequest {
	return ApiPatchZoneRecordRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
		zoneRecordId: zoneRecordId,
	}
}

// Execute executes the request
//  @return ZoneUpdateZoneRecordResponse
func (a *ResourceRecordsAPIService) PatchZoneRecordExecute(r ApiPatchZoneRecordRequest) (*ZoneUpdateZoneRecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneUpdateZoneRecordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.PatchZoneRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/records/{zone_record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_record_id"+"}", url.PathEscape(parameterValueToString(r.zoneRecordId, "zoneRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.zonePatchZoneRecordMessage == nil {
		return localVarReturnValue, nil, reportError("zonePatchZoneRecordMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zonePatchZoneRecordMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateZoneRecordRequest struct {
	ctx context.Context
	ApiService *ResourceRecordsAPIService
	stackId string
	zoneId string
	zoneRecordId string
	zoneUpdateZoneRecordMessage *ZoneUpdateZoneRecordMessage
}

func (r ApiUpdateZoneRecordRequest) ZoneUpdateZoneRecordMessage(zoneUpdateZoneRecordMessage ZoneUpdateZoneRecordMessage) ApiUpdateZoneRecordRequest {
	r.zoneUpdateZoneRecordMessage = &zoneUpdateZoneRecordMessage
	return r
}

func (r ApiUpdateZoneRecordRequest) Execute() (*ZoneUpdateZoneRecordResponse, *http.Response, error) {
	return r.ApiService.UpdateZoneRecordExecute(r)
}

/*
UpdateZoneRecord Update a record

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @param zoneId A DNS zone ID
 @param zoneRecordId A DNS resource record ID
 @return ApiUpdateZoneRecordRequest
*/
func (a *ResourceRecordsAPIService) UpdateZoneRecord(ctx context.Context, stackId string, zoneId string, zoneRecordId string) ApiUpdateZoneRecordRequest {
	return ApiUpdateZoneRecordRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
		zoneId: zoneId,
		zoneRecordId: zoneRecordId,
	}
}

// Execute executes the request
//  @return ZoneUpdateZoneRecordResponse
func (a *ResourceRecordsAPIService) UpdateZoneRecordExecute(r ApiUpdateZoneRecordRequest) (*ZoneUpdateZoneRecordResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ZoneUpdateZoneRecordResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceRecordsAPIService.UpdateZoneRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/zones/{zone_id}/records/{zone_record_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_id"+"}", url.PathEscape(parameterValueToString(r.zoneId, "zoneId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"zone_record_id"+"}", url.PathEscape(parameterValueToString(r.zoneRecordId, "zoneRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.zoneUpdateZoneRecordMessage == nil {
		return localVarReturnValue, nil, reportError("zoneUpdateZoneRecordMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.zoneUpdateZoneRecordMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
