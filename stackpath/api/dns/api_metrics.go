/*
DNS

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	stackId string
	zoneId *string
	pop *string
	startDate *time.Time
	endDate *time.Time
	type_ *string
	granularity *string
	dimensions *[]string
}

// An optional zone ID to retrieve metrics for
func (r ApiGetMetricsRequest) ZoneId(zoneId string) ApiGetMetricsRequest {
	r.zoneId = &zoneId
	return r
}

// An optional StackPath POP code to retrieve metrics from
func (r ApiGetMetricsRequest) Pop(pop string) ApiGetMetricsRequest {
	r.pop = &pop
	return r
}

// A lower bound date to search metrics for.
func (r ApiGetMetricsRequest) StartDate(startDate time.Time) ApiGetMetricsRequest {
	r.startDate = &startDate
	return r
}

// An upper bound date to search metrics for.
func (r ApiGetMetricsRequest) EndDate(endDate time.Time) ApiGetMetricsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiGetMetricsRequest) Type_(type_ string) ApiGetMetricsRequest {
	r.type_ = &type_
	return r
}

func (r ApiGetMetricsRequest) Granularity(granularity string) ApiGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// The dimensions to aggregate metrics by. When empty or unset, defaults to all dimensions. If non-empty, this must always at least include the stack dimension.
func (r ApiGetMetricsRequest) Dimensions(dimensions []string) ApiGetMetricsRequest {
	r.dimensions = &dimensions
	return r
}

func (r ApiGetMetricsRequest) Execute() (*PrometheusMetrics, *http.Response, error) {
	return r.ApiService.GetMetricsExecute(r)
}

/*
GetMetrics Get metrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stackId A stack ID or slug
 @return ApiGetMetricsRequest
*/
func (a *MetricsAPIService) GetMetrics(ctx context.Context, stackId string) ApiGetMetricsRequest {
	return ApiGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		stackId: stackId,
	}
}

// Execute executes the request
//  @return PrometheusMetrics
func (a *MetricsAPIService) GetMetricsExecute(r ApiGetMetricsRequest) (*PrometheusMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrometheusMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dns/v1/stacks/{stack_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", url.PathEscape(parameterValueToString(r.stackId, "stackId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.zoneId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "zone_id", r.zoneId, "")
	}
	if r.pop != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pop", r.pop, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.granularity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "")
	}
	if r.dimensions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dimensions", r.dimensions, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
