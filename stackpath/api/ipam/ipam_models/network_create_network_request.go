// Code generated by go-swagger; DO NOT EDIT.

package ipam_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkCreateNetworkRequest network create network request
//
// swagger:model networkCreateNetworkRequest
type NetworkCreateNetworkRequest struct {

	// IPFamilies of IPs which will be assigned to network interface
	IPFamilies []*V1IPFamily `json:"ipFamilies"`

	// ipv6 subnet
	IPV6Subnet string `json:"ipv6Subnet,omitempty"`

	// metadata
	Metadata *NetworkMetadata `json:"metadata,omitempty"`

	// The network's human-readable name
	Name string `json:"name,omitempty"`

	// The network's primary subnet, in CIDR notation format
	RootSubnet string `json:"rootSubnet,omitempty"`

	// The network's machine-readable name
	Slug string `json:"slug,omitempty"`
}

// Validate validates this network create network request
func (m *NetworkCreateNetworkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPFamilies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCreateNetworkRequest) validateIPFamilies(formats strfmt.Registry) error {
	if swag.IsZero(m.IPFamilies) { // not required
		return nil
	}

	for i := 0; i < len(m.IPFamilies); i++ {
		if swag.IsZero(m.IPFamilies[i]) { // not required
			continue
		}

		if m.IPFamilies[i] != nil {
			if err := m.IPFamilies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipFamilies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkCreateNetworkRequest) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network create network request based on the context it is used
func (m *NetworkCreateNetworkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPFamilies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCreateNetworkRequest) contextValidateIPFamilies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPFamilies); i++ {

		if m.IPFamilies[i] != nil {
			if err := m.IPFamilies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipFamilies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkCreateNetworkRequest) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkCreateNetworkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkCreateNetworkRequest) UnmarshalBinary(b []byte) error {
	var res NetworkCreateNetworkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
